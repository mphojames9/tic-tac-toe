const tiles = document.querySelectorAll(".tile");
const player_X = "X";
const player_O = "O";
const gameOverSec = document.querySelector(".gameOver");
const game = document.querySelector(".game");
const results = document.querySelector(".WinnerText");
let turn = player_X;

const boardState = Array(tiles.length);
boardState.fill(null);

function startGame(){
    tiles.forEach(tile => tile.addEventListener('click', tileClick))    
}

function tileClick(e) {
    if(gameOverSec.classList.contains("visible")){
        return;
    }else{
    const id = e.target.id
    if(!boardState[id-1]){
        boardState[id-1] = turn;
        e.target.innerText = turn;
        if(checkWinner() !==false){
                results.innerHTML = `Player ${turn} wins`;
                gameOverSec.classList.add("visible");
                game.style.opacity = "0.07";
                return;
        }

        turn = turn == player_X ? player_O : player_X;
        const allTilesFilledIn = boardState.every((tile) => tile !== null);
        if(allTilesFilledIn){
            results.innerHTML = "It's a Tie";
            gameOverSec.classList.add("visible");
            game.style.opacity = "0.07";
    }}
}}


const winningCombinations = [
    [0,1,2,3,4,5],
    [1,2,3,4,5,6],
    [2,3,4,5,6,7],
    [3,4,5,6,7,8],
    [9,10,11,12,13,14,],
    [10,11,12,13,14,15],
    [11,12,13,14,15,16],
    [12,13,14,15,16,17],
    [13,14,15,16,17,18],
    [14,15,16,17,18,19],
    [15,16,17,18,19,20],
    [16,17,18,19,20,21],
    [17,18,19,20,21,22],
    [18,19,20,21,22,23],
    [19,20,21,22,23,24],
    [20,21,22,23,24,25],
    [21,22,23,24,25,26],
    [22,23,24,25,26,27],
    [23,24,25,26,27,28],
    [24,25,26,27,28,29],
    [25,26,27,28,29,30],
    [26,27,28,29,30,31],
    [27,28,29,30,31,32],
    [28,29,30,31,32,33],
    [29,30,31,32,33,34],
    [30,31,32,33,34,35],
    [31,32,33,34,35,36],
    [32,33,34,35,36,37],
    [33,34,35,36,37,38],
    [34,35,36,37,38,39],
    [35,36,37,38,39,40],
    [36,37,38,39,40,41],
    [37,38,39,40,41,42],
    [38,39,40,41,42,43],
    [39,40,41,42,43,44],
    [40,41,42,43,44,45],
    [41,42,43,44,45,46],
    [42,43,44,45,46,47],
    [43,44,45,46,47,48],
    [44,45,46,47,48,49],
    [45,46,47,48,49,50],
    [46,47,48,49,50,51],
    [47,48,49,50,51,52],
    [48,49,50,51,52,53],
    [49,50,51,52,53,54],
    [50,51,52,53,54,55],
    [51,52,53,54,55,56],
    [52,53,54,55,56,57],
    [53,54,55,56,57,58],
    [54,55,56,57,58,59],
    [60,61,62,63,64,65],
    [61,62,63,64,65,66],
    [62,63,64,65,66,67],
    [63,64,65,66,67,68],
    [64,65,66,67,68,69],
    [65,66,67,68,69,70],
    [66,67,68,69,70,71],
    [67,68,69,70,71,72],
    [68,69,70,71,72,73],
    [69,70,71,72,73,74],
    [70,71,72,73,74,75],
    [71,72,73,74,75,76],
    [72,73,74,75,76,77],
    [73,74,75,76,77,78],
    [74,75,76,77,78,79],
    [75,76,77,78,79,80],

    [0,9,18,27,36,45],
    [9,18,27,36,45,54],
    [18,27,36,45,54,63],
    [27,36,45,54,63,72],

    [1,10,19,28,37,46,],
    [10,19,28,37,46,55],
    [19,28,37,46,55,64],
    [28,37,46,55,64,73],

    [2,11,20,29,38,47],
    [11,20,29,38,47,56],
    [20,29,38,47,56,64],
    [29,38,47,56,64,74],

    [3,12,21,30,39,48],
    [12,21,30,39,48,57],
    [21,30,39,48,57,65],
    [30,39,48,57,65,75],

    [4,13,22,31,40,49],
    [13,22,31,40,49,58],
    [22,31,40,49,58,66],
    [31,40,49,58,66,76],

    [5,14,23,32,41,50],
    [14,23,32,41,50,59],
    [23,32,41,50,59,68],
    [32,41,50,59,68,77],

    [6,15,24,33,42,51],
    [15,24,33,42,51,60],
    [24,33,42,51,60,69],
    [33,42,51,60,69,78],

    [7,16,25,34,43,52],
    [16,25,34,43,52,61],
    [25,34,43,52,61,70],
    [34,43,52,61,70,79],

    [8,17,26,35,44,53],
    [17,26,35,44,53,62],
    [26,35,44,53,62,71],
    [35,44,53,62,71,80],

    [3,13,23,33,43,53],
    [2,12,22,32,42,52],
    [12,22,32,42,52,62],
    [1,11,21,31,41,51],

    [11,21,31,41,51,61],
    [21,31,41,51,61,71],
    [0,10,20,30,40,50],
    [10,20,30,40,50,60],

    [20,30,40,50,60,70],
    [30,40,50,60,70,80],
    [9,19,29,39,49,59],
    [19,29,39,49,59,69],

    [29,39,49,59,69,79],
    [18,28,38,48,58,68],
    [28,38,48,58,68,78],
    [27,37,47,57,67,77],

]

function checkWinner(){
        for (const condition of winningCombinations){
            let [a,b,c,d,e,f] = condition;
            if(boardState[a] && (boardState[a] == boardState[b] && boardState[a] == boardState[c] && boardState[a] == boardState[d] && boardState[a] == boardState[e] && boardState[a] == boardState[f])){
                return[a,b,c,d,e,f]
            }
        }
        return false;
    };


function reset(){
    location.reload();
}

startGame();